/* Generated by wayland-scanner 1.17.0 */

#ifndef WL_VPC_SERVER_PROTOCOL_H
#define WL_VPC_SERVER_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-server.h"

#ifdef  __cplusplus
extern "C" {
#endif

struct wl_client;
struct wl_resource;

/**
 * @page page_wl_vpc The wl_vpc protocol
 * @section page_ifaces_wl_vpc Interfaces
 * - @subpage page_iface_wl_vpc - Video path control
 * - @subpage page_iface_wl_vpc_surface - vpc surface
 * @section page_copyright_wl_vpc Copyright
 * <pre>
 *
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2016 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * -------
 * Copyright © 2008-2011 Kristian Høgsberg
 * Copyright © 2010-2011 Intel Corporation
 * Permission to use, copy, modify, distribute, and sell this
 * software and its documentation for any purpose is hereby granted
 * without fee, provided that\n the above copyright notice appear in
 * all copies and that both that copyright notice and this permission
 * notice appear in supporting documentation, and that the name of
 * the copyright holders not be used in advertising or publicity
 * pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied
 * warranty.
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
 * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 * THIS SOFTWARE.
 * </pre>
 */
struct wl_surface;
struct wl_vpc;
struct wl_vpc_surface;

/**
 * @page page_iface_wl_vpc wl_vpc
 * @section page_iface_wl_vpc_desc Description
 *
 * The video path control protocol provides a mechanism for the compositor and client to
 * cooperate in the control of the decoding path used for video.  The compositor can
 * request the client to use a fully accelerated hardware path or a video-as-graphics
 * path.
 * @section page_iface_wl_vpc_api API
 * See @ref iface_wl_vpc.
 */
/**
 * @defgroup iface_wl_vpc The wl_vpc interface
 *
 * The video path control protocol provides a mechanism for the compositor and client to
 * cooperate in the control of the decoding path used for video.  The compositor can
 * request the client to use a fully accelerated hardware path or a video-as-graphics
 * path.
 */
extern const struct wl_interface wl_vpc_interface;
/**
 * @page page_iface_wl_vpc_surface wl_vpc_surface
 * @section page_iface_wl_vpc_surface_desc Description
 *
 * An interface that may be implemented by a wl_surface which is being used to
 * present video which allows the compositor to control the decoding pathway
 * being used for the video and to adjust its positioning.
 * @section page_iface_wl_vpc_surface_api API
 * See @ref iface_wl_vpc_surface.
 */
/**
 * @defgroup iface_wl_vpc_surface The wl_vpc_surface interface
 *
 * An interface that may be implemented by a wl_surface which is being used to
 * present video which allows the compositor to control the decoding pathway
 * being used for the video and to adjust its positioning.
 */
extern const struct wl_interface wl_vpc_surface_interface;

/**
 * @ingroup iface_wl_vpc
 * @struct wl_vpc_interface
 */
struct wl_vpc_interface {
	/**
	 */
	void (*get_vpc_surface)(struct wl_client *client,
				struct wl_resource *resource,
				uint32_t id,
				struct wl_resource *surface);
};


/**
 * @ingroup iface_wl_vpc
 */
#define WL_VPC_GET_VPC_SURFACE_SINCE_VERSION 1

#ifndef WL_VPC_SURFACE_PATHWAY_ENUM
#define WL_VPC_SURFACE_PATHWAY_ENUM
enum wl_vpc_surface_pathway {
	WL_VPC_SURFACE_PATHWAY_UNSPECIFIED = 0,
	WL_VPC_SURFACE_PATHWAY_HARDWARE = 1,
	WL_VPC_SURFACE_PATHWAY_GRAPHICS = 2,
};
#endif /* WL_VPC_SURFACE_PATHWAY_ENUM */

#ifndef WL_VPC_SURFACE_CROP_ENUM
#define WL_VPC_SURFACE_CROP_ENUM
enum wl_vpc_surface_crop {
	WL_VPC_SURFACE_CROP_DENOM = 100000,
};
#endif /* WL_VPC_SURFACE_CROP_ENUM */

/**
 * @ingroup iface_wl_vpc_surface
 * @struct wl_vpc_surface_interface
 */
struct wl_vpc_surface_interface {
	/**
	 */
	void (*set_geometry)(struct wl_client *client,
			     struct wl_resource *resource,
			     int32_t x,
			     int32_t y,
			     int32_t width,
			     int32_t height);
	/**
	 * set geometry with crop
	 *
	 * Set vpc surface geometry with the ability to crop the frame.
	 * The x, y, width, and heigth are values in screen coordinates
	 * that specify the rectangle to be textured with the video frame.
	 * The crop values, when divided by crop denom give the region of
	 * the frame to use as the texture.
	 * @since 2
	 */
	void (*set_geometry_with_crop)(struct wl_client *client,
				       struct wl_resource *resource,
				       int32_t x,
				       int32_t y,
				       int32_t width,
				       int32_t height,
				       int32_t crop_x,
				       int32_t crop_y,
				       int32_t crop_width,
				       int32_t crop_height);
};

#define WL_VPC_SURFACE_VIDEO_PATH_CHANGE 0
#define WL_VPC_SURFACE_VIDEO_XFORM_CHANGE 1

/**
 * @ingroup iface_wl_vpc_surface
 */
#define WL_VPC_SURFACE_VIDEO_PATH_CHANGE_SINCE_VERSION 1
/**
 * @ingroup iface_wl_vpc_surface
 */
#define WL_VPC_SURFACE_VIDEO_XFORM_CHANGE_SINCE_VERSION 1

/**
 * @ingroup iface_wl_vpc_surface
 */
#define WL_VPC_SURFACE_SET_GEOMETRY_SINCE_VERSION 1
/**
 * @ingroup iface_wl_vpc_surface
 */
#define WL_VPC_SURFACE_SET_GEOMETRY_WITH_CROP_SINCE_VERSION 2

/**
 * @ingroup iface_wl_vpc_surface
 * Sends an video_path_change event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
wl_vpc_surface_send_video_path_change(struct wl_resource *resource_, uint32_t new_pathway)
{
	wl_resource_post_event(resource_, WL_VPC_SURFACE_VIDEO_PATH_CHANGE, new_pathway);
}

/**
 * @ingroup iface_wl_vpc_surface
 * Sends an video_xform_change event to the client owning the resource.
 * @param resource_ The client's resource
 * @param x_translation x-axis translation
 * @param y_translation y-axis translation
 * @param x_scale_num x scale factor numerator
 * @param x_scale_denom x scale factor denominator
 * @param y_scale_num y scale factor numerator
 * @param y_scale_denom y scale factor denominator
 * @param output_width width of associated output
 * @param output_height height of associated output
 */
static inline void
wl_vpc_surface_send_video_xform_change(struct wl_resource *resource_, int32_t x_translation, int32_t y_translation, uint32_t x_scale_num, uint32_t x_scale_denom, uint32_t y_scale_num, uint32_t y_scale_denom, uint32_t output_width, uint32_t output_height)
{
	wl_resource_post_event(resource_, WL_VPC_SURFACE_VIDEO_XFORM_CHANGE, x_translation, y_translation, x_scale_num, x_scale_denom, y_scale_num, y_scale_denom, output_width, output_height);
}

#ifdef  __cplusplus
}
#endif

#endif
