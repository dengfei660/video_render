/* Generated by wayland-scanner 1.17.0 */

#ifndef SIMPLE_SHELL_CLIENT_PROTOCOL_H
#define SIMPLE_SHELL_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_simple_shell The simple_shell protocol
 * @section page_ifaces_simple_shell Interfaces
 * - @subpage page_iface_wl_simple_shell - control the layout of surfaces
 * @section page_copyright_simple_shell Copyright
 * <pre>
 *
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2016 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * -------
 * Copyright © 2008-2011 Kristian Høgsberg
 * Copyright © 2010-2011 Intel Corporation
 * Permission to use, copy, modify, distribute, and sell this
 * software and its documentation for any purpose is hereby granted
 * without fee, provided that\n the above copyright notice appear in
 * all copies and that both that copyright notice and this permission
 * notice appear in supporting documentation, and that the name of
 * the copyright holders not be used in advertising or publicity
 * pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied
 * warranty.
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
 * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 * THIS SOFTWARE.
 * </pre>
 */
struct wl_simple_shell;
struct wl_surface;

/**
 * @page page_iface_wl_simple_shell wl_simple_shell
 * @section page_iface_wl_simple_shell_desc Description
 *
 * The simple_shell provides control over the size, position,
 * z-order, opacity, etc., of the surfaces making up the user
 * interfaces suitable for situations such as embedded systems.
 * @section page_iface_wl_simple_shell_api API
 * See @ref iface_wl_simple_shell.
 */
/**
 * @defgroup iface_wl_simple_shell The wl_simple_shell interface
 *
 * The simple_shell provides control over the size, position,
 * z-order, opacity, etc., of the surfaces making up the user
 * interfaces suitable for situations such as embedded systems.
 */
extern const struct wl_interface wl_simple_shell_interface;

/**
 * @ingroup iface_wl_simple_shell
 * @struct wl_simple_shell_listener
 */
struct wl_simple_shell_listener {
	/**
	 * provides surface id for new surface
	 *
	 * This event is sent to the creator of a new wl_surface to
	 * provide the surface id. The surface id is used in the
	 * simple_shell protocol to control the surface. The surface
	 * creator can set a surface name with the set_name request in
	 * response to this event.
	 */
	void (*surface_id)(void *data,
			   struct wl_simple_shell *wl_simple_shell,
			   struct wl_surface *surface,
			   uint32_t surfaceId);
	/**
	 * broadcast announcement of a new surface
	 *
	 * This event is sent to all simple_shell listeners to announce
	 * the creation of a new wl_surface.
	 */
	void (*surface_created)(void *data,
				struct wl_simple_shell *wl_simple_shell,
				uint32_t surfaceId,
				const char *name);
	/**
	 * broadcast announcement of a surface destruction
	 *
	 * This event is sent to all simple_shell listeners to announce
	 * the destruction of a new wl_surface.
	 */
	void (*surface_destroyed)(void *data,
				  struct wl_simple_shell *wl_simple_shell,
				  uint32_t surfaceId,
				  const char *name);
	/**
	 * supply current surface information
	 *
	 * This event is sent in response to a get_status request to the
	 * listener registered by the client issuing the request.
	 */
	void (*surface_status)(void *data,
			       struct wl_simple_shell *wl_simple_shell,
			       uint32_t surfaceId,
			       const char *name,
			       uint32_t visible,
			       int32_t x,
			       int32_t y,
			       int32_t width,
			       int32_t height,
			       wl_fixed_t opacity,
			       wl_fixed_t zorder);
	/**
	 * marks end of surface_status events for get_surfaces
	 *
	 * This event is sent to a client that issues a get_surfaces
	 * request after the last surface_status event is sent.
	 */
	void (*get_surfaces_done)(void *data,
				  struct wl_simple_shell *wl_simple_shell);
};

/**
 * @ingroup iface_wl_simple_shell
 */
static inline int
wl_simple_shell_add_listener(struct wl_simple_shell *wl_simple_shell,
			     const struct wl_simple_shell_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) wl_simple_shell,
				     (void (**)(void)) listener, data);
}

#define WL_SIMPLE_SHELL_SET_NAME 0
#define WL_SIMPLE_SHELL_SET_VISIBLE 1
#define WL_SIMPLE_SHELL_SET_GEOMETRY 2
#define WL_SIMPLE_SHELL_SET_OPACITY 3
#define WL_SIMPLE_SHELL_SET_ZORDER 4
#define WL_SIMPLE_SHELL_GET_STATUS 5
#define WL_SIMPLE_SHELL_GET_SURFACES 6
#define WL_SIMPLE_SHELL_SET_FOCUS 7

/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_SURFACE_ID_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_SURFACE_CREATED_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_SURFACE_DESTROYED_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_SURFACE_STATUS_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_GET_SURFACES_DONE_SINCE_VERSION 1

/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_SET_NAME_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_SET_VISIBLE_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_SET_GEOMETRY_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_SET_OPACITY_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_SET_ZORDER_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_GET_STATUS_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_GET_SURFACES_SINCE_VERSION 1
/**
 * @ingroup iface_wl_simple_shell
 */
#define WL_SIMPLE_SHELL_SET_FOCUS_SINCE_VERSION 1

/** @ingroup iface_wl_simple_shell */
static inline void
wl_simple_shell_set_user_data(struct wl_simple_shell *wl_simple_shell, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_simple_shell, user_data);
}

/** @ingroup iface_wl_simple_shell */
static inline void *
wl_simple_shell_get_user_data(struct wl_simple_shell *wl_simple_shell)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_simple_shell);
}

static inline uint32_t
wl_simple_shell_get_version(struct wl_simple_shell *wl_simple_shell)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_simple_shell);
}

/** @ingroup iface_wl_simple_shell */
static inline void
wl_simple_shell_destroy(struct wl_simple_shell *wl_simple_shell)
{
	wl_proxy_destroy((struct wl_proxy *) wl_simple_shell);
}

/**
 * @ingroup iface_wl_simple_shell
 */
static inline void
wl_simple_shell_set_name(struct wl_simple_shell *wl_simple_shell, uint32_t surfaceId, const char *name)
{
	wl_proxy_marshal((struct wl_proxy *) wl_simple_shell,
			 WL_SIMPLE_SHELL_SET_NAME, surfaceId, name);
}

/**
 * @ingroup iface_wl_simple_shell
 */
static inline void
wl_simple_shell_set_visible(struct wl_simple_shell *wl_simple_shell, uint32_t surfaceId, uint32_t visible)
{
	wl_proxy_marshal((struct wl_proxy *) wl_simple_shell,
			 WL_SIMPLE_SHELL_SET_VISIBLE, surfaceId, visible);
}

/**
 * @ingroup iface_wl_simple_shell
 */
static inline void
wl_simple_shell_set_geometry(struct wl_simple_shell *wl_simple_shell, uint32_t surfaceId, int32_t x, int32_t y, int32_t width, int32_t height)
{
	wl_proxy_marshal((struct wl_proxy *) wl_simple_shell,
			 WL_SIMPLE_SHELL_SET_GEOMETRY, surfaceId, x, y, width, height);
}

/**
 * @ingroup iface_wl_simple_shell
 */
static inline void
wl_simple_shell_set_opacity(struct wl_simple_shell *wl_simple_shell, uint32_t surfaceId, wl_fixed_t opacity)
{
	wl_proxy_marshal((struct wl_proxy *) wl_simple_shell,
			 WL_SIMPLE_SHELL_SET_OPACITY, surfaceId, opacity);
}

/**
 * @ingroup iface_wl_simple_shell
 */
static inline void
wl_simple_shell_set_zorder(struct wl_simple_shell *wl_simple_shell, uint32_t surfaceId, wl_fixed_t zorder)
{
	wl_proxy_marshal((struct wl_proxy *) wl_simple_shell,
			 WL_SIMPLE_SHELL_SET_ZORDER, surfaceId, zorder);
}

/**
 * @ingroup iface_wl_simple_shell
 */
static inline void
wl_simple_shell_get_status(struct wl_simple_shell *wl_simple_shell, uint32_t surfaceId)
{
	wl_proxy_marshal((struct wl_proxy *) wl_simple_shell,
			 WL_SIMPLE_SHELL_GET_STATUS, surfaceId);
}

/**
 * @ingroup iface_wl_simple_shell
 *
 * Causes a surface status event for each existing surface
 * to be sent to the listener registered by the client issuing
 * the request.
 */
static inline void
wl_simple_shell_get_surfaces(struct wl_simple_shell *wl_simple_shell)
{
	wl_proxy_marshal((struct wl_proxy *) wl_simple_shell,
			 WL_SIMPLE_SHELL_GET_SURFACES);
}

/**
 * @ingroup iface_wl_simple_shell
 */
static inline void
wl_simple_shell_set_focus(struct wl_simple_shell *wl_simple_shell, uint32_t surfaceId)
{
	wl_proxy_marshal((struct wl_proxy *) wl_simple_shell,
			 WL_SIMPLE_SHELL_SET_FOCUS, surfaceId);
}

#ifdef  __cplusplus
}
#endif

#endif
